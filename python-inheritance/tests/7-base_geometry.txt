The ''7-base_geometry'' module
============================

Using ''integer_validator''
---------------------

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Functional Cases:
----------------
1. Positive integers:

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

2. value not an integer:

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

3. value equal to zero:

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

4. value negative:

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

5. area method:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


Edge Cases:
----------

6. No arguments:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

7. NameError:

    >>> bg.integer_validator(test)
    Traceback (most recent call last):
    NameError: name 'test' is not defined

8. Missing value argument:

    >>> bg.integer_validator("distance",)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

9. Missing name argument:

    >>> bg.integer_validator(, 5)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

10. More than 2 arguments:

    >>> bg.integer_validator("distance", 5, 7)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

11. value Float:

    >>> bg.integer_validator("area", 12.5)
    Traceback (most recent call last):
    TypeError: area must be an integer

12. value Infinite:

    >>> bg.integer_validator("area", float('inf'))
    Traceback (most recent call last):
    TypeError: area must be an integer

13. value Boolean:

    >>> bg.integer_validator("area", False)
    Traceback (most recent call last):
    TypeError: area must be an integer

14. value tuple:

    >>> bg.integer_validator("area", (7, 8))
    Traceback (most recent call last):
    TypeError: area must be an integer

15. value list:

    >>> bg.integer_validator("area", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: area must be an integer

16. value set:

    >>> bg.integer_validator("area", {1, 2, 3})
    Traceback (most recent call last):
    TypeError: area must be an integer

17. value = 0:

    >>> bg.integer_validator("area", 0)
    Traceback (most recent call last):
    ValueError: area must be greater than 0